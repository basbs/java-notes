A Lambda expression is a concise representation of an anonymous function: it doesn't have names, it does have list of parameters, a body, return type and possibly list of exceptions. 

Anonymous— We say anonymous because it doesn’t have an explicit name like a method would
normally have: less to write and think about!

Function— We say function because a lambda isn’t associated with a particular class like a method is.But like a method, a lambda has a list of parameters, a body, a return type, and a possible list of exceptions that can be thrown.

Passed around— A lambda expression can be passed as argument to a method or stored in a
variable or return from the function.

Without Lambda:
new Thread(new Runnable() {                                   
@Override
public void run() {
System.out.println(
"inside runnable using an anonymous inner class");
}
}).start();

With Lambda:
new Thread(() -> System.out.println(
"inside Thread constructor using lambda")).start();

The syntax uses the arrow (->) to separate the arguments from the body. If the  body consists of a single line, no braces are required. 

1. () -> {} // valid. This lambda has no parameters and returns void. It’s similar to a method with an empty body Like; public void run() { }.
2. () -> "Raoul" // Valid. This lambda has no parameters and returns a String as an expression.
3. () -> {return "Mario";} // Valid. This lambda has no parameters and returns a String (using an explicit return statement).
4. (Integer i) -> return "Alan" + i; //Invalid. return is a control-flow statement. To make this lambda valid, curly braces are required as follows: (Integer i) -> {return "Alan" + i;}.
5. (String s) -> {"Iron Man";} // “Iron Man” is an expression, not a statement. To make this lambda valid, you can remove the
curly braces and semicolon as follows: (String s) -> "Iron Man". Or if you prefer, you can use an explicit return statement as follows: (String s) -> {return "Iron Man";}.


Lambda Usage:
